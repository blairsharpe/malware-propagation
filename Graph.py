from Vertex import Vertex
class Graph:

    def __init__(self):
        self.vert_dict = {}
        self.num_vertices = 0

        self.malware_size = malware_size

        self.SI_rate = float(SI)
        self.IR_rate = float(IR)
        self.SR_rate = float(SR)


    def add_vertex(self, network_name, host_num, infected):
        self.num_vertices = self.num_vertices + 1
        new_vertex = Vertex(network_name, host_num, infected)
        self.vert_dict[network_name] = new_vertex
        return new_vertex

    def add_edge(self, frm, to, cost=0):
        if frm not in self.vert_dict:
            self.add_vertex(frm)
        if to not in self.vert_dict:
            self.add_vertex(to)

        self.vert_dict[frm].add_neighbor(self.vert_dict[to], cost)
        self.vert_dict[to].add_neighbor(self.vert_dict[frm], cost)

    def get_vertices(self):
        return self.vert_dict.keys()

    def time_interval(self):

        susceptible = self.S
        infected = self.I
        recovered = self.R

        # First configure S -> I
        I2S_amount = (self.SI_rate * self.S)
        infected += I2S_amount
        susceptible -= I2S_amount
        # Second configure I -> R
        I2R_amount = (self.I * self.IR_rate)
        recovered += I2R_amount
        infected -= I2R_amount
        # Third, configure S -> R
        R2S_amount = (self.S * self.SR_rate)
        recovered += R2S_amount
        susceptible -= R2S_amount

        self.S = susceptible
        self.I = infected
        self.R = recovered

        return True

    def print_population(self):
        print("S: {}   I: {}  R: {}".format(self.S, \
                self.I, self.R))


