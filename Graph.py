from Vertex import Vertex

class Graph:

    def __init__(self, SI_rate, IR_rate, SR_rate, malware_size):
        """The __init__ method for Graph

            Args:
                SI_rate (float): The rate at which devices go from susceptable
                                 to infected
                IR_rate (float): The rate at which devices go from infected to
                                 recovered
                SR_rate (float): The rate at which devices go from  susceptable
                                 to recovered (patched)
             malware_size (int): malware packet size in bytes (UDP)

        """
        self.vert_dict = {}
        self.num_vertices = 0

        self.malware_size = int(malware_size)

        self.SI_rate = float(SI_rate)
        self.IR_rate = float(IR_rate)
        self.SR_rate = float(SR_rate)

    def add_vertex(self, network_name, host_num, infected):
        """Adds networks to the graph (nodes)

        Args:
        network_name (str): The network node name
            host_num (str): The number of hosts on the network

        Returns:
        """

        self.num_vertices = self.num_vertices + 1
        new_vertex = Vertex(network_name, host_num, infected)
        self.vert_dict[network_name] = new_vertex
        return new_vertex

    def add_edge(self, frm, to, cost=0):
        """Adds connections in the network and their respective bandwidth

            Args:
                frm (str): Network A to be connected
                 to (str): Network B to be connected
        """

        if frm not in self.vert_dict:
            self.add_vertex(frm)
        if to not in self.vert_dict:
            self.add_vertex(to)

        self.vert_dict[frm].add_neighbor(self.vert_dict[to], cost)
        self.vert_dict[to].add_neighbor(self.vert_dict[frm], cost)

    def get_vertices(self):
        """Find all the nodes (networks) and their respective names"""
        return self.vert_dict.keys()

    def time_interval(self):
        """Time interval to compute the virus propogating"""
        susceptible = self.S
        infected = self.I
        recovered = self.R

        # First configure S -> I
        I2S_amount = (self.SI_rate * self.S)
        infected += I2S_amount
        susceptible -= I2S_amount
        # Second configure I -> R
        I2R_amount = (self.I * self.IR_rate)
        recovered += I2R_amount
        infected -= I2R_amount
        # Third, configure S -> R
        R2S_amount = (self.S * self.SR_rate)
        recovered += R2S_amount
        susceptible -= R2S_amount

        self.S = susceptible
        self.I = infected
        self.R = recovered

